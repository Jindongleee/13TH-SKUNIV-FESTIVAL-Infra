name: backend cd

on:
  push:
    branches:
      - main
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true

      - name: Update submodule
        run: git submodule update --remote

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper (no test)
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_IMAGE_NAME }}
          platforms: linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 프로덕션 배포 (green)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_GREEN }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/skufestival || exit 1
            docker compose pull spring1
            docker compose up -d --no-deps --build spring1 spring2 spring3
            docker image prune -a -f

  deploy-develop:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 디벨롭 배포 (blue + nginx)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_BLUE }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/skufestival || exit 1
            docker compose pull spring
            docker compose up -d --no-deps --build spring spring2
            docker image prune -a -f