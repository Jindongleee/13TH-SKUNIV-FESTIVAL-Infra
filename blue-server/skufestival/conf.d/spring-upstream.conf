upstream spring_backend {
    # 도커 환경에서는 서비스명:포트로 연결
    server spring1.2025skufestival.site:8080 max_fails=3 fail_timeout=10s;
    server spring2.2025skufestival.site:8080 max_fails=3 fail_timeout=10s;
}

upstream spring_docker {
    server spring:8080;
    server spring2:8080;

}

server {
    listen 80;
    server_name api.2025skufestival.site;

    location / {
        # HTTP로 들어온 요청을 HTTPS로 리다이렉트
        return 301 https://$server_name$request_uri;
    }
}

server {

    listen 80;
    server_name spring1.2025skufestival.site;

    location / {

        proxy_pass http://spring_docker;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

    }

}


server {
    listen 443 ssl;
    server_name api.2025skufestival.site;

    # SSL 설정 (변경 없음)
    ssl_certificate /etc/ssl/certs/fullchain.pem;
    ssl_certificate_key /etc/ssl/private/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers on;

    # CORS 기본 헤더 (모든 응답에 적용)
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Authorization' always;
    add_header 'Access-Control-Allow-Credentials' 'false' always;

    client_max_body_size 50M;

    location / {
        # OPTIONS 프리플라이트 요청 전용 처리
	if ($request_method = OPTIONS) {
        	add_header 'Access-Control-Allow-Origin' '*' always;
        	add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        	add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Authorization' always;
        	add_header 'Access-Control-Max-Age' 1728000 always;
        	add_header 'Content-Length' 0;
        	return 204;
	}


	add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Accept, Authorization' always;

        # 프록시 설정
        proxy_pass http://spring_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

	# 캐싱
        proxy_cache spring_cache;
        proxy_cache_valid 200 302 10m;   # 200, 302 응답을 10분간 캐시
        proxy_cache_valid 404 1m;        # 404 응답은 1분 캐시 (선택)
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        add_header X-Cache-Status $upstream_cache_status; # 캐시 HIT/MISS 확인용

 	# 동일 리소스 단일 처리 중복 저장 x
	proxy_cache_lock on;
	proxy_cache_lock_timeout 10s;      # (필요시 조정) 락 대기 최대 시간
        proxy_cache_lock_age 5s;           # (필요시 조정) 락 유지 최대 시간
    }
}